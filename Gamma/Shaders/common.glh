const uint DIFFUSE_MASK = (1U << 0);
const uint NORMAL_MASK = (1U << 1);
const uint SHININESS_MASK = (1U << 2);
const uint ROUGHNESS_MASK = (1U << 3);
const uint METALLIC_MASK = (1U << 4);
const uint BUMP_MASK = (1U << 5);
const uint DISPLACEMENT_MASK = (1U << 6);
const uint EMISSION_MASK = (1U << 7);

const float PI = 3.14159265359;

// Create tangent base on the fly
vec3 worldSpaceNormal(sampler2D normalMap, vec2 texCoords, vec3 posW, vec3 N) {
	vec3 Nt = texture(normalMap, texCoords).xyz * 2.0 - 1.0;

	vec3 Q1 = dFdx(posW);
	vec3 Q2 = dFdy(posW);
	vec2 st1 = dFdx(texCoords);
	vec2 st2 = dFdy(texCoords);
 
	vec3 T = normalize(Q1*st2.t - Q2*st1.t);
	vec3 B = normalize(-Q1*st2.s + Q2*st1.s);
	mat3 TBN = mat3(T, B, N);

	return normalize(TBN * Nt);
}

#define READ_PBR_TEXTURES(coords)                                 \
if ((texMask & DIFFUSE_MASK) != 0U)                               \
        albedo = pow(texture(albedoMap, coords).rgb, vec3(2.2));  \
	if ((texMask & NORMAL_MASK) != 0U)                            \
        N = worldSpaceNormal(normalMap, TexCoords, WorldPos, N);  \
	if ((texMask & SHININESS_MASK) != 0U)                         \
        alpha = 1.0 - texture(shininessMap, coords).r;            \
	if ((texMask & ROUGHNESS_MASK) != 0U)                         \
        alpha = texture(shininessMap, coords).r;                  \
	if ((texMask & METALLIC_MASK) != 0U)                          \
        metallic = texture(metallicMap, coords).r;                \